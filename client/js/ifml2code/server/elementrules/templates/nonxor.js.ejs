/*jslint node: true */
"use strict";

var Promise = require('bluebird'),
    merge = require('merge');

exports.createInitializer = function (options) {
    function ViewModel(context, req) {
        if (!(this instanceof ViewModel)) { return new ViewModel(context, req); }
        this.context = context;
    }

    ViewModel.prototype.id = '<%= id %>';

    ViewModel.prototype.compute = function () {
        if (this.computing) { return this.computing; }
        var self = this;
<% if (children.length || events.length) { %>
        return this.computing = Promise.all([
<%     for (var i = 0; i < children.length; ++i) { -%>
            <%= i !== 0 ? ',' : '' %>this.context.elements['<%= children[i] %>'].compute()
<%     }
       for (var i = 0; i < events.length; ++i) { -%>
            <%= (i !== 0 || children.length) ? ',' : '' %>this.context.elements['<%= events[i].id %>'].compute()
<%     } -%>
        ]).then(function () {
            self.computed = true;
        });
<% } else { -%>
        return this.computing = Promise.resolve();
<% } -%>
    };

    ViewModel.prototype.toObject = function () {
        if (!this.computed) { return; }
        return {};
    };

    ViewModel.prototype.toQuery = function (event) {
        return merge(
<% for (var i = 0; i < children.length; ++i) { -%>
            <%= i !== 0 ? ',' : '' %>this.context.elements['<%= children[i] %>'].toQuery(event)
<% } -%>
        );
    };

    return ViewModel;
};
