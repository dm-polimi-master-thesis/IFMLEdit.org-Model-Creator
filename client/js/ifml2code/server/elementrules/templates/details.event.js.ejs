/*jslint node: true */
"use strict";

var Promise = require('bluebird'),
    url = require('url'),
    merge = require('merge');

exports.createInitializer = function (options) {
    function ViewModel(context, req) {
        if (!(this instanceof ViewModel)) { return new ViewModel(context, req); }
        this.context = context;
    }

    ViewModel.prototype.id = '<%= id %>';
    ViewModel.prototype.targetChain = {
<% for (var i = 0 ; i < targetActives.length; i++){ -%>
       <%= i !== 0 ? ',' : '' %>'<%= targetActives[i].xor %>': '<%= targetActives[i].child %>'
<% } -%>
    };

    ViewModel.prototype.broken = {
<% for (var i = 0 ; i < broken.length; i++){ -%>
       <%= i !== 0 ? ',' : '' %>'<%= broken[i] %>': true
<% } -%>
    };

    ViewModel.prototype.compute = function () {
        this.computed = true;
        return Promise.resolve();
    };

    ViewModel.prototype.toObject = function () {
        if (!this.computed) { return; }
        var pathname = './<%= path %>',
<% if (outcoming) { -%>
            source = this.context.elements['<%= component %>'].toObject(),
            targetInputs = {
<%     for (var i = 0 ; i < outcoming.bindings.length; i++){
           if (outcoming.type === 'details') { -%>
                <%= i !== 0 ? ',' : '' %>'<%= outcoming.target %>': source.item && source.item['<%= outcoming.bindings[i].output %>']
<%         }
           if (outcoming.type === 'list') { -%>
                <%= i !== 0 ? ',' : '' %>'<%= outcoming.target %>$f$<%= outcoming.bindings[i].input %>': source.item && source.item['<%= outcoming.bindings[i].output %>']
<%         }
           if (outcoming.type === 'form') { -%>
                <%= i !== 0 ? ',' : '' %>'<%= outcoming.target %>$f$<%= outcoming.bindings[i].input %>': source.item && source.item['<%= outcoming.bindings[i].output %>']
<%         }
           if (outcoming.type === 'action') { -%>
                <%= i !== 0 ? ',' : '' %>'<%= outcoming.target %>$f$<%= outcoming.bindings[i].input %>': source.item && source.item['<%= outcoming.bindings[i].output %>']
<%         }
        } -%>
            },
<% }
   if (isSameTopLevel) { -%>
            query = merge(this.context.elements['<%= currentTopLevel %>'].toQuery(this), this.targetChain);
<% } else { -%>
            query = this.targetChain;
<% } -%>
        return {
<% if (targetsAction) {
      if (outcoming) { -%>
            hiddens: targetInputs,
<%    } else { -%>
            hiddens: {},
<%    } -%>
            action: url.format({pathname: pathname, query: query})
<% } else {
    if (outcoming) { -%>
          href: url.format({pathname: pathname, query: merge(query, targetInputs)})
<%    } else { -%>
          href: url.format({pathname: pathname, query: query})
<%    }
   } -%>
        };
    };

    return ViewModel;
};
